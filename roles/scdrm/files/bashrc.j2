{{ shebang }}
#
# These provide a more convenient SCDRM management
#

function scdrm-check-change-tracking {
local REPORT="{{ scdrm_install_dir}}/reports/change-tracking-check-$(date '+%F-%T').txt"
local LOGF="{{ scdrm_install_dir}}/log/change-tracking-check-$(date '+%F-%T').log"

cd {{ scdrm_install_dir }} > /dev/null

if [[ $# -eq 1 && ! -s $1 ]]
then ansible-playbook playbooks/change-tracking.yml -e "check=yes" -l $1 | tee $LOGF
elif [[ $# -eq 1 && -s $1 ]]
then ansible-playbook playbooks/change-tracking.yml -e "check=yes" -i $1| tee $LOGF
elif [[ $# -eq 0 ]]
then ansible-playbook playbooks/change-tracking.yml -e "check=yes" | tee $LOGF
fi

printf '\nChecking for unreachables...\n' | tee -a $REPORT
fgrep 'unreachable=1' $LOGF ||  printf "\nAll good!\n\n" | tee -a $REPORT
printf '\nChecking for low disk space...\n' | tee -a $REPORT
fgrep 'No space' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
printf '\nChecking for failed tasks...\n' | tee -a $REPORT
fgrep 'fatal:' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
}

function scdrm-update-change-tracking {
local REPORT="{{ scdrm_install_dir}}/reports/change-tracking-update-$(date '+%F-%T').txt"
local LOGF="{{ scdrm_install_dir}}/log/change-tracking-update-$(date '+%F-%T').log"

cd {{ scdrm_install_dir }} > /dev/null

if [[ $# -eq 1 && ! -s $1 ]]
then ansible-playbook playbooks/change-tracking.yml -e "update=yes" -l $1 | tee $LOGF
elif [[ $# -eq 1 && -s $1 ]]
then ansible-playbook playbooks/change-tracking.yml -e "update=yes" -i $1| tee $LOGF
elif [[ $# -eq 0 ]]
then ansible-playbook playbooks/change-tracking.yml -e "update=yes" | tee $LOGF
fi

printf '\nChecking for unreachables...\n' | tee -a $REPORT
fgrep 'unreachable=1' $LOGF ||  printf "\nAll good!\n\n" | tee -a $REPORT
printf '\nChecking for low disk space...\n' | tee -a $REPORT
fgrep 'No space' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
printf '\nChecking for failed tasks...\n' | tee -a $REPORT
fgrep 'fatal:' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
}

function scdrm-enforce-consistency {
local REPORT="{{ scdrm_install_dir}}/reports/consistency-enforce-$(date '+%F-%T').txt"
local LOGF="{{ scdrm_install_dir}}/log/consistency-enforce-$(date '+%F-%T').log"

cd {{ scdrm_install_dir }} > /dev/null

if [[ $# -eq 1 && ! -s $1 ]]
then ansible-playbook playbooks/consistency-enforce.yml -l $1 | tee $LOGF
elif [[ $# -eq 1 && -s $1 ]]
then ansible-playbook playbooks/consistency-enforce.yml -i $1 | tee $LOGF
elif [[ $# -eq 0 ]]
then ansible-playbook playbooks/consistency-enforce.yml | tee $LOGF
fi

ansible-playbook playbooks/consistency-enforce.yml | tee $LOGF

printf '\nChecking for unreachables...\n' | tee -a $REPORT
fgrep 'unreachable=1' $LOGF ||  printf "\nAll good!\n\n" | tee -a $REPORT
printf '\nChecking for low disk space...\n' | tee -a $REPORT
fgrep 'No space' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
printf '\nChecking for failed tasks...\n' | tee -a $REPORT
fgrep 'fatal:' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
}

function scdrm-config-update {
local REPORT="{{ scdrm_install_dir}}/reports/config-update-$(date '+%F-%T').txt"
local LOGF="{{ scdrm_install_dir}}/log/config-update-$(date '+%F-%T').log"

cd {{ scdrm_install_dir }} > /dev/null

if [[ $# -eq 1 && ! -s $1 ]]
then ansible-playbook playbooks/scdrm.yml -e "update=yes" -l $1 | tee $LOGF
elif [[ $# -eq 1 && -s $1 ]]
then ansible-playbook playbooks/scdrm.yml -e "update=yes" -i $1| tee $LOGF
elif [[ $# -eq 0 ]]
then ansible-playbook playbooks/scdrm.yml -e "update=yes" | tee $LOGF
fi


ansible-playbook playbooks/scdrm.yml -e "update=yes" | tee $LOGF

printf '\nChecking for unreachables...\n' | tee -a $REPORT
fgrep 'unreachable=1' $LOGF ||  printf "\nAll good!\n\n" | tee -a $REPORT
printf '\nChecking for low disk space...\n' | tee -a $REPORT
fgrep 'No space' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
printf '\nChecking for failed tasks...\n' | tee -a $REPORT
fgrep 'fatal:' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
}

function scdrm-config-update--dryrun-off {
local REPORT="{{ scdrm_install_dir}}/reports/config-update-dryrun-off-$(date '+%F-%T').txt"
local LOGF="{{ scdrm_install_dir}}/log/config-update-dryrun-off-$(date '+%F-%T').log"

cd {{ scdrm_install_dir }} > /dev/null

if [[ $# -eq 1 && ! -s $1 ]]
then ansible-playbook playbooks/switch-dryrun-mode.yml -e "dryrun=0" -l $1 | tee $LOGF
elif [[ $# -eq 1 && -s $1 ]]
then ansible-playbook playbooks/switch-dryrun-mode.yml -e "dryrun=0" -i $1| tee $LOGF
elif [[ $# -eq 0 ]]
then ansible-playbook playbooks/switch-dryrun-mode.yml -e "dryrun=0" | tee $LOGF
fi


printf '\nChecking for unreachables...\n' | tee -a $REPORT
fgrep 'unreachable=1' $LOGF ||  printf "\nAll good!\n\n" | tee -a $REPORT
printf '\nChecking for low disk space...\n' | tee -a $REPORT
fgrep 'No space' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
printf '\nChecking for failed tasks...\n' | tee -a $REPORT
fgrep 'fatal:' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
}

function scdrm-config-update--dryrun-on {
local REPORT="{{ scdrm_install_dir}}/reports/config-update-dryrun-on-$(date '+%F-%T').txt"
local LOGF="{{ scdrm_install_dir}}/log/config-update-dryrun-on-$(date '+%F-%T').log"

cd {{ scdrm_install_dir }} > /dev/null

if [[ $# -eq 1 && ! -s $1 ]]
then ansible-playbook playbooks/switch-dryrun-mode.yml -e "dryrun=1" -l $1 | tee $LOGF
elif [[ $# -eq 1 && -s $1 ]]
then ansible-playbook playbooks/switch-dryrun-mode.yml -e "dryrun=1" -i $1| tee $LOGF
elif [[ $# -eq 0 ]]
then ansible-playbook playbooks/switch-dryrun-mode.yml -e "dryrun=1" | tee $LOGF
fi

printf '\nChecking for unreachables...\n' | tee -a $REPORT
fgrep 'unreachable=1' $LOGF ||  printf "\nAll good!\n\n" | tee -a $REPORT
printf '\nChecking for low disk space...\n' | tee -a $REPORT
fgrep 'No space' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
printf '\nChecking for failed tasks...\n' | tee -a $REPORT
fgrep 'fatal:' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
}

function scdrm-remove {
local REPORT="{{ scdrm_install_dir}}/reports/remove-$(date '+%F-%T').txt"
local LOGF="{{ scdrm_install_dir}}/log/remove-$(date '+%F-%T').log"

cd {{ scdrm_install_dir }} > /dev/null

if [[ $# -eq 1 && ! -s $1 ]]
then ansible-playbook playbooks/scdrm.yml -e "remove=yes" -l $1 | tee $LOGF
elif [[ $# -eq 1 && -s $1 ]]
then ansible-playbook playbooks/scdrm.yml -e "remove=yes" -i $1| tee $LOGF
elif [[ $# -eq 0 ]]
then ansible-playbook playbooks/scdrm.yml -e "remove=yes" | tee $LOGF
fi

printf '\nChecking for unreachables...\n' | tee -a $REPORT
fgrep 'unreachable=1' $LOGF ||  printf "\nAll good!\n\n" | tee -a $REPORT
printf '\nChecking for low disk space...\n' | tee -a $REPORT
fgrep 'No space' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
printf '\nChecking for failed tasks...\n' | tee -a $REPORT
fgrep 'fatal:' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
}


function scdrm-install {
local REPORT="{{ scdrm_install_dir}}/reports/install-$(date '+%F-%T').txt"
local LOGF="{{ scdrm_install_dir}}/log/install-$(date '+%F-%T').log"

cd {{ scdrm_install_dir }} > /dev/null

if [[ $# -eq 1 && ! -s $1 ]]
then ansible-playbook playbooks/scdrm.yml -l $1 | tee $LOGF
elif [[ $# -eq 1 && -s $1 ]]
then ansible-playbook playbooks/scdrm.yml -i $1| tee $LOGF
elif [[ $# -eq 0 ]]
then ansible-playbook playbooks/scdrm.yml | tee $LOGF
fi

printf '\nChecking for unreachables...\n' | tee -a $REPORT
fgrep 'unreachable=1' $LOGF ||  printf "\nAll good!\n\n" | tee -a $REPORT
printf '\nChecking for low disk space...\n' | tee -a $REPORT
fgrep 'No space' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
printf '\nChecking for failed tasks...\n' | tee -a $REPORT
fgrep 'fatal:' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
}

# This function will take optional inventory file
function scdrm-report {
local REPORT="{{ scdrm_install_dir}}/reports/reporting-$(date '+%F-%T').txt"
local LOGF="{{ scdrm_install_dir}}/log/reporting-$(date '+%F-%T').log"

cd {{ scdrm_install_dir }} > /dev/null

if [[ $# -eq 1 && ! -s $1 ]]
then ansible-playbook playbooks/reporting.yml -l $1 | tee $LOGF
elif [[ $# -eq 1 && -s $1 ]]
then ansible-playbook playbooks/reporting.yml -i $1| tee $LOGF
elif [[ $# -eq 0 ]]
then ansible-playbook playbooks/reporting.yml | tee $LOGF
fi

printf '\nChecking for unreachables...\n' | tee -a $REPORT
fgrep 'unreachable=1' $LOGF ||  printf "\nAll good!\n\n" | tee -a $REPORT
printf '\nChecking for low disk space...\n' | tee -a $REPORT
fgrep 'No space' $LOGF || printf '\nAll good!\n\n' | tee -a $REPORT
}

